import "./chunk-GLO34V7O.js";
import {
  Connector
} from "./chunk-Q57XF42W.js";
import {
  normalizeChainId
} from "./chunk-FG2CDSPQ.js";
import {
  _defineProperty
} from "./chunk-34YZJOIR.js";
import "./chunk-LZ6VCZ7V.js";
import "./chunk-BDWYZ6PT.js";
import "./chunk-XP73JIMO.js";
import "./chunk-2W43H2ZO.js";
import "./chunk-GX6ENUMN.js";
import "./chunk-Z5TXSCOX.js";
import "./chunk-24WYSLVZ.js";
import "./chunk-XUIMJWOW.js";
import "./chunk-PN2QNFK3.js";
import "./chunk-HGYWFVQ3.js";
import "./chunk-LOGNJ6KD.js";
import "./chunk-ISFFG72X.js";
import "./chunk-CAKBA2TH.js";
import "./chunk-NSGWOEL5.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-XZJ3BFHI.js";
import "./chunk-OZPMY55K.js";
import "./chunk-XI7DZF7B.js";
import "./chunk-RFADWPZZ.js";
import "./chunk-JJB5KQLE.js";
import "./chunk-NXEB5OJ7.js";
import "./chunk-VTW5QV5N.js";
import "./chunk-RRGRB3Y4.js";
import "./chunk-URWF4CLN.js";
import "./chunk-57GP6OHD.js";
import "./chunk-EM4EVOCV.js";
import "./chunk-TYX6FO5H.js";
import "./chunk-XG6ELODQ.js";
import "./chunk-4YICYXFJ.js";
import "./chunk-SE5FO5KR.js";
import "./chunk-BCDBLLAF.js";
import "./chunk-NTR27TMF.js";
import "./chunk-ZEN2VC7A.js";
import "./chunk-PT2L3HMJ.js";
import "./chunk-XBPXT443.js";
import "./chunk-T6WK2CY6.js";
import "./chunk-HSXVVCEX.js";
import "./chunk-OH6EBDGX.js";
import "./chunk-MJVZZIIG.js";
import "./chunk-QHAA5PMH.js";
import "./chunk-HEGJVXXZ.js";
import "./chunk-BYL3R755.js";
import "./chunk-DWGOTYNX.js";
import "./chunk-BLSAQLYQ.js";
import {
  getChainProvider
} from "./chunk-HF4AN25C.js";
import "./chunk-CI2Z3K4K.js";
import "./chunk-BSGMLTKR.js";
import "./chunk-Q3CBO36D.js";
import "./chunk-JBUKMPOH.js";
import "./chunk-FUMSQWJN.js";
import "./chunk-QF63YTUA.js";
import "./chunk-35TW3HRH.js";
import "./chunk-DCHRW6Y3.js";
import "./chunk-6TN67MWU.js";
import "./chunk-BRNTPPUN.js";
import "./chunk-DUR6YZYN.js";
import "./chunk-NUWOKTHW.js";
import "./chunk-N735XVS2.js";
import "./chunk-NDDS3XQE.js";
import "./chunk-I2GNSU5T.js";
import "./chunk-LRN3HBSZ.js";
import "./chunk-Z5K4GTBT.js";
import "./chunk-FOWDQQBS.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js
var SignerConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    this._provider = void 0;
    this._signer = void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!this._provider) {
      this._provider = getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      });
    }
    return this._provider;
  }
  async getSigner() {
    if (!this._signer) {
      const provider = await this.getProvider();
      this._signer = getUpdatedSigner(this.options.signer, provider);
    }
    return this._signer;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    this._provider = getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    });
    this._signer = getUpdatedSigner(this.options.signer, this._provider);
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getUpdatedSigner(signer, provider) {
  if (provider) {
    return signer.connect(provider);
  }
  return signer;
}
export {
  SignerConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-signer.browser.esm-ACS4FRAQ.js.map
