import {
  InjectedConnector
} from "./chunk-KND7SLSL.js";
import {
  assertWindowEthereum
} from "./chunk-RKAC5DGX.js";
import "./chunk-TT4JDUHE.js";
import "./chunk-T37EI6FM.js";
import "./chunk-R6CXSER4.js";
import "./chunk-FG2CDSPQ.js";
import "./chunk-EKYLSAGW.js";
import "./chunk-DBUC3OVX.js";
import {
  init_eventemitter3
} from "./chunk-LYKHSI7P.js";
import "./chunk-AD6JOGMB.js";
import {
  init_lib7 as init_lib
} from "./chunk-ICVCM4I6.js";
import "./chunk-FZ2VX2UM.js";
import "./chunk-PVSNNJIX.js";
import "./chunk-MVEJMUOB.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/imtoken/dist/thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm.js
init_eventemitter3();
init_lib();
var ImTokenConnector = class extends InjectedConnector {
  constructor(arg) {
    const defaultOptions = {
      name: "imToken",
      getProvider() {
        var _a;
        function getReady(ethereum) {
          const isImToken = !!(ethereum == null ? void 0 : ethereum.isImToken);
          if (!isImToken) {
            return;
          }
          return ethereum;
        }
        if (assertWindowEthereum(globalThis.window)) {
          if ((_a = globalThis.window.ethereum) == null ? void 0 : _a.providers) {
            return globalThis.window.ethereum.providers.find(getReady);
          }
          return getReady(globalThis.window.ethereum);
        }
      }
    };
    const options = {
      ...defaultOptions,
      ...arg.options
    };
    super({
      chains: arg.chains,
      options,
      connectorStorage: arg.connectorStorage
    });
  }
};
export {
  ImTokenConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm-QX4ZMDRK.js.map
