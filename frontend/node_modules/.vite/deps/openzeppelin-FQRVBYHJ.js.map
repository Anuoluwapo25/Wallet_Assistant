{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js"],
  "sourcesContent": ["import { getContract } from \"../../../../contract/contract.js\";\nimport { isHex } from \"../../../../utils/encoding/helpers/is-hex.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport { readContract } from \"../../../read-contract.js\";\n/**\n * @internal - only exported for testing\n */\nexport async function prepareOpenZeppelinTransaction({ account, serializableTransaction, transaction, gasless, }) {\n    const forrwaderContract = getContract({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client,\n    });\n    const nonce = await readContract({\n        contract: forrwaderContract,\n        method: \"function getNonce(address) view returns (uint256)\",\n        params: [account.address],\n    });\n    const [signature, message] = await (async () => {\n        // TODO: handle special case for `approve` -> `permit` transactions\n        if (!serializableTransaction.to) {\n            throw new Error(\"OpenZeppelin transactions must have a 'to' address\");\n        }\n        if (!serializableTransaction.gas) {\n            throw new Error(\"OpenZeppelin transactions must have a 'gas' value\");\n        }\n        if (!serializableTransaction.data) {\n            throw new Error(\"OpenZeppelin transactions must have a 'data' value\");\n        }\n        // chainless support!\n        if (gasless.experimentalChainlessSupport) {\n            const message = {\n                from: account.address,\n                to: serializableTransaction.to,\n                value: 0n,\n                gas: serializableTransaction.gas,\n                nonce: nonce,\n                data: serializableTransaction.data,\n                chainid: BigInt(transaction.chain.id),\n            };\n            return [\n                await account.signTypedData({\n                    domain: {\n                        name: \"GSNv2 Forwarder\",\n                        version: \"0.0.1\",\n                        verifyingContract: forrwaderContract.address,\n                    },\n                    message,\n                    primaryType: \"ForwardRequest\",\n                    types: { ForwardRequest: ChainAwareForwardRequest },\n                }),\n                message,\n            ];\n        }\n        // else non-chainless support\n        const message = {\n            from: account.address,\n            to: serializableTransaction.to,\n            value: 0n,\n            gas: serializableTransaction.gas,\n            nonce: nonce,\n            data: serializableTransaction.data,\n        };\n        return [\n            await account.signTypedData({\n                domain: {\n                    name: gasless.domainName ?? \"GSNv2 Forwarder\",\n                    version: gasless.domainVersion ?? \"0.0.1\",\n                    chainId: transaction.chain.id,\n                    verifyingContract: forrwaderContract.address,\n                },\n                message,\n                primaryType: \"ForwardRequest\",\n                types: { ForwardRequest },\n            }),\n            message,\n        ];\n    })();\n    // TODO: handle special case for `approve` -> `permit`\n    const messageType = \"forward\";\n    return { message, signature, messageType };\n}\nexport const ForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n];\nexport const ChainAwareForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n    { name: \"chainid\", type: \"uint256\" },\n];\n/**\n * @internal\n */\nexport async function relayOpenZeppelinTransaction(options) {\n    const { message, messageType, signature } = await prepareOpenZeppelinTransaction(options);\n    const response = await fetch(options.gasless.relayerUrl, {\n        method: \"POST\",\n        body: stringify({\n            request: message,\n            type: messageType,\n            signature,\n            forwarderAddress: options.gasless.relayerForwarderAddress,\n        }),\n    });\n    if (!response.ok) {\n        response.body?.cancel();\n        throw new Error(`Failed to send transaction: ${await response.text()}`);\n    }\n    const json = await response.json();\n    if (!json.result) {\n        throw new Error(`Relay transaction failed: ${json.message}`);\n    }\n    const transactionHash = JSON.parse(json.result).txHash;\n    if (isHex(transactionHash)) {\n        return {\n            transactionHash,\n            chain: options.transaction.chain,\n            client: options.transaction.client,\n        };\n    }\n    throw new Error(`Failed to send transaction: ${stringify(json)}`);\n}\n//# sourceMappingURL=openzeppelin.js.map"],
  "mappings": "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",
  "names": ["message"]
}
