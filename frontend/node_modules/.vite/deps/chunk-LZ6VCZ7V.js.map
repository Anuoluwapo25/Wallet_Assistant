{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_getBlockByNumber.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_maxPriorityFeePerGas.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/promise/resolve-promised-value.js", "../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/units.js", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/rpc/actions/eth_gasPrice.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/gas/get-gas-price.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/gas/op-gas-fee-reducer.js", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/gas/fee-data.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/extensions/modular/__generated__/ModularCore/read/getInstalledExtensions.js", "../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/ipfs.js", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/storage/download.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/base58/alphabet.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/base58/encode.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/bytecode/cbor-decode.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/bytecode/prefix.js", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/utils/bytecode/extractIPFS.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/contract/actions/resolve-abi.js", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/extract-error.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/src/transaction/actions/estimate-gas.ts", "../../@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/transaction/actions/to-serializable-transaction.js"],
  "sourcesContent": [null, null, "/**\n * Resolves a possibly asynchronous value.\n * If the value is a function that returns a promise, it will be awaited and the resolved value will be returned.\n * Otherwise, the value itself will be returned.\n *\n * @param value - The value to resolve.\n * @returns A promise that resolves to the resolved value.\n * @internal\n */\nexport async function resolvePromisedValue(value) {\n    return typeof value === \"function\" ? await value() : value;\n}\n//# sourceMappingURL=resolve-promised-value.js.map", "/**\n * Converts a given number of units to a string representation with a specified number of decimal places.\n * @param units - The number of units to convert.\n * @param decimals - The number of decimal places to include in the string representation.\n * @returns The string representation of the converted units.\n * @example\n * ```ts\n * import { toTokens } from \"thirdweb/utils\";\n * toTokens(1000000000000000000n, 18)\n * // '1'\n * ```\n * @utils\n */\nexport function toTokens(units, decimals) {\n    // Convert to string once and handle negativity.\n    const stringValue = units.toString();\n    const prefix = stringValue[0] === \"-\" ? \"-\" : \"\";\n    // Abusing that string \"-\" is truthy\n    const absStringValue = prefix ? stringValue.slice(1) : stringValue;\n    // Ensure we have enough digits for the fractional part.\n    const paddedValue = absStringValue.padStart(decimals + 1, \"0\");\n    const splitIndex = paddedValue.length - decimals;\n    // Extract integer and fraction parts directly.\n    const integerPart = paddedValue.slice(0, splitIndex) || \"0\";\n    let fractionPart = paddedValue.slice(splitIndex);\n    // Manually trim trailing zeros from the fraction part.\n    for (let i = fractionPart.length - 1; i >= 0; i--) {\n        if (fractionPart[i] !== \"0\") {\n            fractionPart = fractionPart.slice(0, i + 1);\n            break;\n        }\n        // check if the next digit is a zero also\n        // If all zeros, make fraction part empty\n        if (i === 0) {\n            fractionPart = \"\";\n        }\n    }\n    // Construct and return the formatted string.\n    return `${prefix}${integerPart}${fractionPart ? `.${fractionPart}` : \"\"}`;\n}\n/**\n * Converts a value from wei to ether.\n * @param wei The value in wei to be converted.\n * @returns The converted value in ether.\n * @example\n * ```ts\n * import { toEther } from \"thirdweb/utils\";\n * toEther(1000000000000000000n)\n * // '1'\n * ```\n * @utils\n */\nexport function toEther(wei) {\n    return toTokens(wei, 18);\n}\n/**\n * Converts a string representation of a number with decimal places to a BigInt representation.\n * @param tokens - The string representation of the number, including the integer and fraction parts.\n * @param decimals - The number of decimal places to include in the BigInt representation.\n * @returns The BigInt representation of the number.\n * @example\n * ```ts\n * import { toUnits } from \"thirdweb/utils\";\n * toUnits('1', 18)\n * // 1000000000000000000n\n * ```\n * @utils\n */\nexport function toUnits(tokens, decimals) {\n    let [integerPart, fractionPart = \"\"] = tokens.split(\".\");\n    const prefix = integerPart.startsWith(\"-\") ? \"-\" : \"\";\n    if (prefix) {\n        integerPart = integerPart.slice(1);\n    }\n    fractionPart = fractionPart.padEnd(decimals, \"0\"); // Ensure fraction part is at least 'decimals' long.\n    if (decimals === 0) {\n        // Check if there's any fraction part that would necessitate rounding up the integer part.\n        if (fractionPart[0] && Number.parseInt(fractionPart[0]) >= 5) {\n            integerPart = (BigInt(integerPart) + 1n).toString();\n        }\n        fractionPart = \"\"; // No fraction part is needed when decimals === 0.\n    }\n    else {\n        // When decimals > 0, handle potential rounding based on the digit right after the specified decimal places.\n        if (fractionPart.length > decimals) {\n            const roundingDigit = fractionPart[decimals];\n            if (roundingDigit && Number.parseInt(roundingDigit, 10) >= 5) {\n                // If rounding is needed, add 1 to the last included digit of the fraction part.\n                const roundedFraction = BigInt(fractionPart.substring(0, decimals)) + 1n;\n                fractionPart = roundedFraction.toString().padStart(decimals, \"0\");\n                if (fractionPart.length > decimals) {\n                    // If rounding the fraction results in a length increase (e.g., .999 -> 1.000), increment the integer part.\n                    integerPart = (BigInt(integerPart) + 1n).toString();\n                    // Adjust the fraction part if it's longer than the specified decimals due to rounding up.\n                    fractionPart = fractionPart.substring(fractionPart.length - decimals);\n                }\n            }\n            else {\n                // If no rounding is necessary, just truncate the fraction part to the specified number of decimals.\n                fractionPart = fractionPart.substring(0, decimals);\n            }\n        }\n        // If the fraction part is shorter than the specified decimals, it's already handled by padEnd() above.\n    }\n    // Combine the integer and fraction parts into the final BigInt representation.\n    return BigInt(`${prefix}${integerPart}${fractionPart}`);\n}\n/**\n * Converts the specified number of tokens to Wei.\n * @param tokens The number of tokens to convert.\n * @returns The converted value in Wei.\n * @example\n * ```ts\n * import { toWei } from \"thirdweb/utils\";\n * toWei('1')\n * // 1000000000000000000n\n * ```\n * @utils\n */\nexport function toWei(tokens) {\n    return toUnits(tokens, 18);\n}\n/**\n * Converts the specified number from gwei to wei.\n * @param gwei The number of gwei to convert.\n * @returns The converted value in wei.\n * @example\n * ```ts\n * import { fromGwei } from \"thirdweb/utils\";\n * fromGwei('1')\n * // 1000000000n\n * ```\n * @utils\n */\nexport function fromGwei(gwei) {\n    return toUnits(gwei, 9);\n}\n//# sourceMappingURL=units.js.map", null, null, "/**\n * Via: https://twitter.com/0xjustadev/status/1758973668011434062\n *\n * Increases the gas fee value to the nearest power of 2.\n * If the value is already a power of 2 or 0, it returns the value as is.\n * Otherwise, it finds the highest power of 2 that is bigger than the given value.\n * @param value - The gas fee value to be \"rounded up\".\n * @returns The *increased* gas value which will result in a lower L1 gas fee, overall reducing the gas fee.\n * @internal\n */\nexport function roundUpGas(value) {\n    if (value === 0n || (value & (value - 1n)) === 0n) {\n        return value;\n    }\n    // Find the highest set bit by shifting until the value is 0.\n    let highestBit = 1n;\n    while (value > 0n) {\n        // biome-ignore lint/style/noParameterAssign: the whole point is that we modify the value in palce\n        value >>= 1n;\n        highestBit <<= 1n;\n    }\n    return highestBit;\n}\n//# sourceMappingURL=op-gas-fee-reducer.js.map", null, "import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\nexport const FN_SELECTOR = \"0x5357aa5e\";\nconst FN_INPUTS = [];\nconst FN_OUTPUTS = [\n    {\n        name: \"_installedExtensions\",\n        type: \"tuple[]\",\n        internalType: \"struct IModularCore.InstalledExtension[]\",\n        components: [\n            {\n                name: \"implementation\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"config\",\n                type: \"tuple\",\n                internalType: \"struct IExtensionConfig.ExtensionConfig\",\n                components: [\n                    {\n                        name: \"registerInstallationCallback\",\n                        type: \"bool\",\n                        internalType: \"bool\",\n                    },\n                    {\n                        name: \"requiredInterfaces\",\n                        type: \"bytes4[]\",\n                        internalType: \"bytes4[]\",\n                    },\n                    {\n                        name: \"supportedInterfaces\",\n                        type: \"bytes4[]\",\n                        internalType: \"bytes4[]\",\n                    },\n                    {\n                        name: \"callbackFunctions\",\n                        type: \"tuple[]\",\n                        internalType: \"struct IExtensionConfig.CallbackFunction[]\",\n                        components: [\n                            {\n                                name: \"selector\",\n                                type: \"bytes4\",\n                                internalType: \"bytes4\",\n                            },\n                        ],\n                    },\n                    {\n                        name: \"fallbackFunctions\",\n                        type: \"tuple[]\",\n                        internalType: \"struct IExtensionConfig.FallbackFunction[]\",\n                        components: [\n                            {\n                                name: \"selector\",\n                                type: \"bytes4\",\n                                internalType: \"bytes4\",\n                            },\n                            {\n                                name: \"permissionBits\",\n                                type: \"uint256\",\n                                internalType: \"uint256\",\n                            },\n                        ],\n                    },\n                ],\n            },\n        ],\n    },\n];\n/**\n * Checks if the `getInstalledExtensions` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `getInstalledExtensions` method is supported.\n * @extension MODULAR\n * @example\n * ```ts\n * import { isGetInstalledExtensionsSupported } from \"thirdweb/extensions/modular\";\n *\n * const supported = await isGetInstalledExtensionsSupported(contract);\n * ```\n */\nexport async function isGetInstalledExtensionsSupported(contract) {\n    return detectMethod({\n        contract,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n    });\n}\n/**\n * Decodes the result of the getInstalledExtensions function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension MODULAR\n * @example\n * ```ts\n * import { decodeGetInstalledExtensionsResult } from \"thirdweb/extensions/modular\";\n * const result = decodeGetInstalledExtensionsResult(\"...\");\n * ```\n */\nexport function decodeGetInstalledExtensionsResult(result) {\n    return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n/**\n * Calls the \"getInstalledExtensions\" function on the contract.\n * @param options - The options for the getInstalledExtensions function.\n * @returns The parsed result of the function call.\n * @extension MODULAR\n * @example\n * ```ts\n * import { getInstalledExtensions } from \"thirdweb/extensions/modular\";\n *\n * const result = await getInstalledExtensions({\n *  contract,\n * });\n *\n * ```\n */\nexport async function getInstalledExtensions(options) {\n    return readContract({\n        contract: options.contract,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n        params: [],\n    });\n}\n//# sourceMappingURL=getInstalledExtensions.js.map", "const DEFAULT_GATEWAY = \"https://{clientId}.ipfscdn.io/ipfs/{cid}\";\n/**\n * Resolves the scheme of a given URI and returns the corresponding URL.\n * If the URI starts with \"ipfs://\", it constructs a URL using the IPFS client ID and the IPFS gateway.\n * If the URI starts with \"http\", it returns the URI as is.\n * Otherwise, it throws an error indicating an invalid URI scheme.\n * @param options - The options object containing the URI and the IPFS client.\n * @returns The resolved URL.\n * @throws Error if the URI scheme is invalid.\n * @example\n * ```ts\n * import { resolveScheme } from \"thirdweb/storage\";\n * const url = resolveScheme({\n *  client,\n *  uri: \"ipfs://Qm...\",\n * });\n * ```\n * @storage\n */\nexport function resolveScheme(options) {\n    if (options.uri.startsWith(\"ipfs://\")) {\n        const gateway = options.client.config?.storage?.gatewayUrl ?? DEFAULT_GATEWAY;\n        const clientId = options.client.clientId;\n        const cid = findIPFSCidFromUri(options.uri);\n        let bundleId = undefined;\n        if (typeof globalThis !== \"undefined\" && \"Application\" in globalThis) {\n            // shims use wallet connect RN module which injects Application info in globalThis\n            // biome-ignore lint/suspicious/noExplicitAny: get around globalThis typing\n            bundleId = globalThis.Application.applicationId;\n        }\n        // purposefully using SPLIT here and not replace for CID to avoid cases where users don't know the schema\n        // also only splitting on `/ipfs` to avoid cases where people pass non `/` terminated gateway urls\n        return `${gateway.replace(\"{clientId}\", clientId).split(\"/ipfs\")[0]}/ipfs/${cid}${bundleId ? `?bundleId=${bundleId}` : \"\"}`;\n    }\n    if (options.uri.startsWith(\"http\")) {\n        return options.uri;\n    }\n    throw new Error(`Invalid URI scheme, expected \"ipfs://\" or \"http(s)://\"`);\n}\n/**\n * @internal\n */\nexport function findIPFSCidFromUri(uri) {\n    if (!uri.startsWith(\"ipfs://\")) {\n        // do not touch URIs that are not ipfs URIs\n        return uri;\n    }\n    // first index of `/Qm` or `/bafy` in the uri (case insensitive)\n    const firstIndex = uri.search(/\\/(Qm|baf)/i);\n    // we start one character after the first `/` to avoid including it in the CID\n    return uri.slice(firstIndex + 1);\n}\n/**\n * Uploads or extracts URIs from the given files.\n * @template T - The type of the files (File, Buffer, String).\n * @param files - The files to upload or extract URIs from.\n * @param client - The Thirdweb client.\n * @param [startNumber] - The starting number for rewriting file names.\n * @returns - A promise that resolves to an array of URIs.\n * @throws {Error} - If the files are not all of the same type (all URI or all FileOrBufferOrString).\n * @internal\n *\n */\nexport async function uploadOrExtractURIs(files, client, startNumber) {\n    if (isUriList(files)) {\n        return files;\n    }\n    if (isMetadataList(files)) {\n        const { upload } = await import(\"../storage/upload.js\");\n        const uris = await upload({\n            client,\n            files,\n            rewriteFileNames: {\n                fileStartNumber: startNumber || 0,\n            },\n        });\n        return Array.isArray(uris) ? uris : [uris];\n    }\n    throw new Error(\"Files must all be of the same type (all URI or all FileOrBufferOrString)\");\n}\n/**\n * Retrieves the base URI from a batch of URIs.\n *\n * @param uris - An array of URIs.\n * @returns The base URI shared by all URIs in the batch.\n * @throws If the batch contains URIs with different base URIs or if no base URI is found.\n * @internal\n */\nexport function getBaseUriFromBatch(uris) {\n    const baseUri = uris[0]?.substring(0, uris[0].lastIndexOf(\"/\"));\n    for (let i = 0; i < uris.length; i++) {\n        const uri = uris[i]?.substring(0, uris[i]?.lastIndexOf(\"/\"));\n        if (baseUri !== uri) {\n            throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n        }\n    }\n    if (!baseUri) {\n        throw new Error(\"No base URI found in the batch\");\n    }\n    // Ensure that baseUri ends with trailing slash\n    return `${baseUri.replace(/\\/$/, \"\")}/`;\n}\nfunction isUriList(metadatas) {\n    return metadatas.every((m) => typeof m === \"string\");\n}\nfunction isMetadataList(metadatas) {\n    return metadatas.every((m) => typeof m !== \"string\");\n}\n//# sourceMappingURL=ipfs.js.map", null, null, null, null, "import { isHex } from \"../encoding/hex.js\";\n/**\n * Ensures that the given bytecode has the correct prefix.\n * If the bytecode already starts with \"0x\", it is returned as is.\n * Otherwise, the prefix \"0x\" is added to the bytecode.\n * @param bytecode - The bytecode to ensure the prefix for.\n * @returns The bytecode with the correct prefix.\n * @example\n * ```ts\n * import { ensureBytecodePrefix } from \"thirdweb/utils/bytecode/prefix\";\n * const bytecode = \"363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\";\n * const prefixedBytecode = ensureBytecodePrefix(bytecode);\n * console.log(prefixedBytecode);\n * ```\n * @utils\n */\nexport function ensureBytecodePrefix(bytecode) {\n    if (isHex(bytecode, { strict: false })) {\n        return bytecode;\n    }\n    return `0x${bytecode}`;\n}\n//# sourceMappingURL=prefix.js.map", null, "import { formatAbi, parseAbi } from \"abitype\";\nimport { getInstalledExtensions } from \"../../extensions/modular/__generated__/ModularCore/read/getInstalledExtensions.js\";\nimport { download } from \"../../storage/download.js\";\nimport { extractIPFSUri } from \"../../utils/bytecode/extractIPFS.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getBytecode } from \"./get-bytecode.js\";\nconst ABI_RESOLUTION_CACHE = new WeakMap();\n/**\n * Resolves the ABI (Application Binary Interface) for a given contract.\n * If the ABI is already cached, it returns the cached value.\n * Otherwise, it tries to resolve the ABI from the contract's API.\n * If that fails, it resolves the ABI from the contract's bytecode.\n * @param contract The contract for which to resolve the ABI.\n * @param contractApiBaseUrl The base URL of the contract API. Defaults to \"https://contract.thirdweb.com/abi\".\n * @returns A promise that resolves to the ABI of the contract.\n * @example\n * ```ts\n * import { createThirdwebClient, getContract } from \"thirdweb\";\n * import { resolveContractAbi } from \"thirdweb/contract\";\n * import { ethereum } from \"thirdweb/chains\";\n * const client = createThirdwebClient({ clientId: \"...\" });\n * const myContract = getContract({\n *  client,\n *  address: \"...\",\n *  chain: ethereum,\n * });\n * const abi = await resolveContractAbi(myContract);\n * ```\n * @contract\n */\nexport function resolveContractAbi(contract, contractApiBaseUrl = \"https://contract.thirdweb.com/abi\") {\n    if (ABI_RESOLUTION_CACHE.has(contract)) {\n        return ABI_RESOLUTION_CACHE.get(contract);\n    }\n    const prom = (async () => {\n        // if the contract already HAS a user defined we always use that!\n        if (contract.abi) {\n            return contract.abi;\n        }\n        // try to get it from the api\n        try {\n            return await resolveAbiFromContractApi(contract, contractApiBaseUrl);\n        }\n        catch (e) {\n            // if that fails, try to resolve it from the bytecode\n            return await resolveCompositeAbi(contract);\n        }\n    })();\n    ABI_RESOLUTION_CACHE.set(contract, prom);\n    return prom;\n}\n/**\n * Resolves the ABI (Application Binary Interface) for a contract from the contract API.\n * @param contract The ThirdwebContract instance representing the contract.\n * @param contractApiBaseUrl The base URL of the contract API. Defaults to \"https://contract.thirdweb.com/abi\".\n * @returns A promise that resolves to the ABI of the contract.\n * @example\n * ```ts\n * import { createThirdwebClient, getContract } from \"thirdweb\";\n * import { resolveAbiFromContractApi } from \"thirdweb/contract\"\n * import { ethereum } from \"thirdweb/chains\";\n * const client = createThirdwebClient({ clientId: \"...\" });\n * const myContract = getContract({\n *  client,\n *  address: \"...\",\n *  chain: ethereum,\n * });\n * const abi = await resolveAbiFromContractApi(myContract);\n * ```\n * @contract\n */\nexport async function resolveAbiFromContractApi(\n// biome-ignore lint/suspicious/noExplicitAny: library function that accepts any contract type\ncontract, contractApiBaseUrl = \"https://contract.thirdweb.com/abi\") {\n    const response = await getClientFetch(contract.client)(`${contractApiBaseUrl}/${contract.chain.id}/${contract.address}`);\n    const json = await response.json();\n    if (!json || json.error) {\n        throw new Error(`Failed to resolve ABI from contract API. ${json.error || \"\"}`);\n    }\n    return json;\n}\n/**\n * Resolves the ABI (Application Binary Interface) from the bytecode of a contract.\n * @param contract The ThirdwebContract instance.\n * @returns The resolved ABI as a generic type.\n * @throws Error if no IPFS URI is found in the bytecode.\n * @example\n * ```ts\n * import { createThirdwebClient, getContract } from \"thirdweb\";\n * import { resolveAbiFromBytecode } from \"thirdweb/contract\";\n * import { ethereum } from \"thirdweb/chains\";\n * const client = createThirdwebClient({ clientId: \"...\" });\n * const myContract = getContract({\n *  client,\n *  address: \"...\",\n *  chain: ethereum,\n * });\n * const abi = await resolveAbiFromBytecode(myContract);\n * ```\n * @contract\n */\nexport async function resolveAbiFromBytecode(\n// biome-ignore lint/suspicious/noExplicitAny: library function that accepts any contract type\ncontract) {\n    const bytecode = await getBytecode(contract);\n    if (bytecode === \"0x\") {\n        const { id, name } = contract.chain;\n        throw new Error(`Failed to load contract bytecode. Make sure the contract [${contract.address}] exists on the chain [${name || \"Unknown Chain\"} (chain id: ${id})]`);\n    }\n    const ipfsUri = extractIPFSUri(bytecode);\n    if (!ipfsUri) {\n        // just early exit if we can't find an IPFS URI\n        return [];\n    }\n    try {\n        const res = await download({ uri: ipfsUri, client: contract.client });\n        const json = await res.json();\n        // ABI is at `json.output.abi`\n        return json.output.abi;\n    }\n    catch {\n        // if we can't resolve the ABI from the IPFS URI, return an empty array\n        return [];\n    }\n}\nconst PLUGINS_ABI = {\n    inputs: [],\n    name: \"getAllPlugins\",\n    outputs: [\n        {\n            components: [\n                {\n                    internalType: \"bytes4\",\n                    name: \"functionSelector\",\n                    type: \"bytes4\",\n                },\n                {\n                    internalType: \"string\",\n                    name: \"functionSignature\",\n                    type: \"string\",\n                },\n                {\n                    internalType: \"address\",\n                    name: \"pluginAddress\",\n                    type: \"address\",\n                },\n            ],\n            internalType: \"struct IPluginMap.Plugin[]\",\n            name: \"registered\",\n            type: \"tuple[]\",\n        },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n};\nconst BASE_ROUTER_ABI = {\n    inputs: [],\n    name: \"getAllExtensions\",\n    outputs: [\n        {\n            components: [\n                {\n                    components: [\n                        {\n                            internalType: \"string\",\n                            name: \"name\",\n                            type: \"string\",\n                        },\n                        {\n                            internalType: \"string\",\n                            name: \"metadataURI\",\n                            type: \"string\",\n                        },\n                        {\n                            internalType: \"address\",\n                            name: \"implementation\",\n                            type: \"address\",\n                        },\n                    ],\n                    internalType: \"struct IExtension.ExtensionMetadata\",\n                    name: \"metadata\",\n                    type: \"tuple\",\n                },\n                {\n                    components: [\n                        {\n                            internalType: \"bytes4\",\n                            name: \"functionSelector\",\n                            type: \"bytes4\",\n                        },\n                        {\n                            internalType: \"string\",\n                            name: \"functionSignature\",\n                            type: \"string\",\n                        },\n                    ],\n                    internalType: \"struct IExtension.ExtensionFunction[]\",\n                    name: \"functions\",\n                    type: \"tuple[]\",\n                },\n            ],\n            internalType: \"struct IExtension.Extension[]\",\n            name: \"allExtensions\",\n            type: \"tuple[]\",\n        },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n};\nconst DIAMOND_ABI = {\n    inputs: [],\n    name: \"facets\",\n    outputs: [\n        {\n            components: [\n                {\n                    internalType: \"address\",\n                    name: \"facetAddress\",\n                    type: \"address\",\n                },\n                {\n                    internalType: \"bytes4[]\",\n                    name: \"functionSelectors\",\n                    type: \"bytes4[]\",\n                },\n            ],\n            type: \"tuple[]\",\n        },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n};\n/**\n * Resolves the ABI for a contract based on its bytecode.\n * If the contract follows the plugin-pattern or dynamic pattern, it resolves the ABIs for the plugins and merges them with the root ABI.\n * If the contract follows the base router pattern, it resolves the ABIs for the plugins and merges them with the root ABI.\n * If the contract follows the diamond pattern, it resolves the ABIs for the facets and merges them with the root ABI.\n * @param contract The contract for which to resolve the ABI.\n * @param rootAbi The root ABI to use for the contract. If not provided, it resolves the ABI from the contract's bytecode.\n * @param resolveSubAbi A function to resolve the ABI for a sub-contract. If not provided, it uses the default ABI resolution logic.\n * @returns The resolved ABI for the contract.\n * @example\n * ```ts\n * import { createThirdwebClient, getContract } from \"thirdweb\";\n * import { resolveCompositeAbiFromBytecode } from \"thirdweb/contract\";\n * import { ethereum } from \"thirdweb/chains\";\n * const client = createThirdwebClient({ clientId: \"...\" });\n * const myContract = getContract({\n *  client,\n *  address: \"...\",\n *  chain: ethereum,\n * });\n * const abi = await resolveCompositeAbiFromBytecode(myContract);\n * ```\n * @contract\n */\nexport async function resolveCompositeAbi(contract, rootAbi, resolveSubAbi) {\n    const [rootAbi_, pluginPatternAddresses, baseRouterAddresses, modularExtensionAddresses, diamondFacetAddresses,] = await Promise.all([\n        rootAbi ? rootAbi : resolveAbiFromBytecode(contract),\n        // check these all at the same time\n        resolvePluginPatternAddresses(contract),\n        resolveBaseRouterAddresses(contract),\n        resolveModularExtensionAddresses(contract),\n        resolveDiamondFacetAddresses(contract),\n    ]);\n    const mergedPlugins = [\n        ...new Set([\n            ...pluginPatternAddresses,\n            ...baseRouterAddresses,\n            ...modularExtensionAddresses,\n            ...diamondFacetAddresses,\n        ]),\n    ];\n    // no plugins\n    if (!mergedPlugins.length) {\n        return rootAbi_;\n    }\n    // get all the abis for the plugins\n    const pluginAbis = await getAbisForPlugins({\n        contract,\n        plugins: mergedPlugins,\n        resolveSubAbi,\n    });\n    // join them together\n    return joinAbis({ rootAbi: rootAbi_, pluginAbis });\n}\nasync function resolvePluginPatternAddresses(contract) {\n    try {\n        const { readContract } = await import(\"../../transaction/read-contract.js\");\n        const pluginMap = await readContract({\n            contract,\n            method: PLUGINS_ABI,\n        });\n        // if there are no plugins, return the root ABI\n        if (!pluginMap.length) {\n            return [];\n        }\n        // get all the plugin addresses\n        return [...new Set(pluginMap.map((item) => item.pluginAddress))];\n    }\n    catch {\n        // no-op, expected because not everything supports this\n    }\n    return [];\n}\nasync function resolveBaseRouterAddresses(contract) {\n    try {\n        const { readContract } = await import(\"../../transaction/read-contract.js\");\n        const pluginMap = await readContract({\n            contract,\n            method: BASE_ROUTER_ABI,\n        });\n        // if there are no plugins, return the root ABI\n        if (!pluginMap.length) {\n            return [];\n        }\n        // get all the plugin addresses\n        return [...new Set(pluginMap.map((item) => item.metadata.implementation))];\n    }\n    catch {\n        // no-op, expected because not everything supports this\n    }\n    return [];\n}\nasync function resolveModularExtensionAddresses(contract) {\n    try {\n        const extensions = await getInstalledExtensions({ contract });\n        // if there are no plugins, return the root ABI\n        if (!extensions.length) {\n            return [];\n        }\n        // get all the plugin addresses\n        return [...new Set(extensions.map((item) => item.implementation))];\n    }\n    catch {\n        // no-op, expected because not everything supports this\n    }\n    return [];\n}\nasync function resolveDiamondFacetAddresses(contract) {\n    try {\n        const { readContract } = await import(\"../../transaction/read-contract.js\");\n        const facets = await readContract({ contract, method: DIAMOND_ABI });\n        // if there are no facets, return the root ABI\n        if (!facets.length) {\n            return [];\n        }\n        // get all the plugin addresses\n        return facets.map((item) => item.facetAddress);\n    }\n    catch {\n        // no-op, expected because not everything supports this\n    }\n    return [];\n}\nasync function getAbisForPlugins(options) {\n    return Promise.all(options.plugins.map((pluginAddress) => {\n        const newContract = {\n            ...options.contract,\n            address: pluginAddress,\n        };\n        // if we have a method passed in that tells us how to resove the sub-api, use that\n        if (options.resolveSubAbi) {\n            return options.resolveSubAbi(newContract);\n        }\n        // otherwise default logic\n        return resolveAbiFromBytecode(newContract);\n    }));\n}\nfunction joinAbis(options) {\n    let mergedPlugins = options.pluginAbis\n        .flat()\n        .filter((item) => item.type !== \"constructor\");\n    if (options.rootAbi) {\n        mergedPlugins = [...(options.rootAbi || []), ...mergedPlugins].filter(Boolean);\n    }\n    // unique by formatting every abi and then throwing them in a set\n    // TODO: this may not be super efficient...\n    const humanReadableAbi = [...new Set(formatAbi(mergedPlugins))];\n    // finally parse it back out\n    return parseAbi(humanReadableAbi);\n}\n//# sourceMappingURL=resolve-abi.js.map", null, null, "import { getGasOverridesForTransaction } from \"../../gas/fee-data.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { encode } from \"./encode.js\";\nimport { estimateGas } from \"./estimate-gas.js\";\n/**\n * Converts a prepared transaction to a transaction with populated options.\n * @param options - The transaction and additional options for conversion\n * @returns A serializable transaction for inspection or submission to an account.\n *\n * @note For easier transaction sending, {@see sendTransaction}\n * @example\n * ```ts\n * import { prepareTransaction, toSerializableTransaction } from \"thirdweb\";\n *\n * const transaction = await prepareTransaction({\n *   transaction: {\n *     to: \"0x...\",\n *     value: 100,\n *   },\n * });\n * const finalTx = await toSerializableTransaction({\n *   transaction,\n * });\n *\n * account.sendTransaction(finalTx);\n * ```\n * @transaction\n */\nexport async function toSerializableTransaction(options) {\n    const rpcRequest = getRpcClient(options.transaction);\n    const chainId = options.transaction.chain.id;\n    const from = options.from;\n    let [data, nonce, gas, feeData, to, accessList, value] = await Promise.all([\n        encode(options.transaction),\n        (async () => {\n            // if the user has specified a nonce, use that\n            const resolvedNonce = await resolvePromisedValue(options.transaction.nonce);\n            if (resolvedNonce !== undefined) {\n                return resolvedNonce;\n            }\n            return from // otherwise get the next nonce (import the method to do so)\n                ? await import(\"../../rpc/actions/eth_getTransactionCount.js\").then(({ eth_getTransactionCount }) => eth_getTransactionCount(rpcRequest, {\n                    address: from,\n                    blockTag: \"pending\",\n                }))\n                : undefined;\n        })(),\n        // takes the same options as the sendTransaction function thankfully!\n        estimateGas(options),\n        getGasOverridesForTransaction(options.transaction),\n        resolvePromisedValue(options.transaction.to),\n        resolvePromisedValue(options.transaction.accessList),\n        resolvePromisedValue(options.transaction.value),\n    ]);\n    const extraGas = await resolvePromisedValue(options.transaction.extraGas);\n    if (extraGas) {\n        gas += extraGas;\n    }\n    return {\n        to,\n        chainId,\n        data,\n        gas,\n        nonce,\n        accessList,\n        value,\n        ...feeData,\n    };\n}\n//# sourceMappingURL=to-serializable-transaction.js.map"],
  "mappings": "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",
  "names": ["a", "b", "c", "e", "f", "g", "i", "j", "k", "m", "readContract", "_a", "encode", "getRpcClient"]
}
