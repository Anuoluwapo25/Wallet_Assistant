import "./chunk-GBYOH3OX.js";
import {
  Connector
} from "./chunk-UCYGK4C7.js";
import "./chunk-3KB6CXDF.js";
import "./chunk-IERGSLQL.js";
import "./chunk-AOWXXJZS.js";
import "./chunk-EGRHWZRV.js";
import {
  normalizeChainId
} from "./chunk-FG2CDSPQ.js";
import {
  _defineProperty
} from "./chunk-EKYLSAGW.js";
import "./chunk-ONINU4X5.js";
import "./chunk-TROKJQSZ.js";
import "./chunk-IJQKOW3J.js";
import "./chunk-PWCOMEVQ.js";
import "./chunk-5PLSYZPH.js";
import "./chunk-WWY7S4YD.js";
import "./chunk-NCXSBGTZ.js";
import "./chunk-XZJ3BFHI.js";
import "./chunk-BUQZZBOK.js";
import "./chunk-TRIG3672.js";
import "./chunk-P6ZRD2YP.js";
import "./chunk-YQXZCXT7.js";
import "./chunk-ZUYO5AUO.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-NLGMSEPI.js";
import "./chunk-KET4IVC3.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-WWCIHYYC.js";
import "./chunk-QPJNMK5X.js";
import "./chunk-EM4EVOCV.js";
import "./chunk-JHLGCL3E.js";
import "./chunk-KTQVWUV2.js";
import "./chunk-PFXDKCJP.js";
import "./chunk-QRUGAG74.js";
import "./chunk-TQSBSQBN.js";
import "./chunk-7ANR4RMH.js";
import "./chunk-T6VWFUAO.js";
import "./chunk-KD36C5FR.js";
import "./chunk-TVDDAT66.js";
import "./chunk-HSXVVCEX.js";
import "./chunk-MFHCUARO.js";
import "./chunk-AU6AAM4C.js";
import "./chunk-S6D7FOPI.js";
import "./chunk-UZSJHEX3.js";
import "./chunk-VPPIOC3R.js";
import "./chunk-5X5IZRNG.js";
import "./chunk-PWI2AFJF.js";
import {
  getChainProvider,
  getDefaultGasOverrides
} from "./chunk-HYU4DDVV.js";
import {
  require_utils
} from "./chunk-LZRVQWU5.js";
import "./chunk-44IMT2VJ.js";
import "./chunk-DBUC3OVX.js";
import {
  init_eventemitter3
} from "./chunk-LYKHSI7P.js";
import "./chunk-AD6JOGMB.js";
import "./chunk-AYWBNB3P.js";
import "./chunk-GPOHRREA.js";
import "./chunk-FBOAELBZ.js";
import "./chunk-FSHJLBLG.js";
import {
  init_lib7 as init_lib
} from "./chunk-ICVCM4I6.js";
import {
  Signer
} from "./chunk-FZ2VX2UM.js";
import "./chunk-PVSNNJIX.js";
import "./chunk-NUWOKTHW.js";
import "./chunk-N735XVS2.js";
import "./chunk-NDDS3XQE.js";
import "./chunk-I2GNSU5T.js";
import "./chunk-LRN3HBSZ.js";
import "./chunk-Z5K4GTBT.js";
import "./chunk-ZEN2VC7A.js";
import "./chunk-DUR6YZYN.js";
import {
  __toESM
} from "./chunk-MVEJMUOB.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js
init_lib();
var import_utils = __toESM(require_utils());
init_eventemitter3();
var WrappedSigner = class _WrappedSigner extends Signer {
  constructor(signer) {
    super();
    this.signer = signer;
    (0, import_utils.defineReadOnly)(this, "provider", signer.provider);
  }
  async getAddress() {
    return await this.signer.getAddress();
  }
  async signMessage(message) {
    return await this.signer.signMessage(message);
  }
  async signTransaction(transaction) {
    return await this.signer.signTransaction(transaction);
  }
  connect(provider) {
    return new _WrappedSigner(this.signer.connect(provider));
  }
  _signTypedData(domain, types, value) {
    return this.signer._signTypedData(domain, types, value);
  }
  async sendTransaction(transaction) {
    if (!this.provider) {
      throw new Error("Provider not found");
    }
    const gas = await getDefaultGasOverrides(this.provider);
    const txWithGas = {
      ...gas,
      ...transaction
    };
    return await this.signer.sendTransaction(txWithGas);
  }
};
var LocalWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", "local_wallet");
    _defineProperty(this, "name", "Local Wallet");
    _defineProperty(this, "shimDisconnectKey", "localWallet.shimDisconnect");
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    this._provider = void 0;
    this._signer = void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!this._provider) {
      this._provider = getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      });
    }
    return this._provider;
  }
  async getSigner() {
    if (!this._signer) {
      const provider = await this.getProvider();
      this._signer = getSignerFromEthersWallet(this.options.ethersWallet, provider);
    }
    return this._signer;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    this._provider = getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    });
    this._signer = getSignerFromEthersWallet(this.options.ethersWallet, this._provider);
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getSignerFromEthersWallet(ethersWallet, provider) {
  let signer = ethersWallet;
  if (provider) {
    signer = ethersWallet.connect(provider);
  }
  return new WrappedSigner(signer);
}
export {
  LocalWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm-4BXFYJFW.js.map
