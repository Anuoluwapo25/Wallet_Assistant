import {
  toSerializableTransaction
} from "./chunk-LZ6VCZ7V.js";
import "./chunk-BDWYZ6PT.js";
import {
  getContract
} from "./chunk-GX6ENUMN.js";
import "./chunk-Z5TXSCOX.js";
import {
  readContract,
  serializeTransaction
} from "./chunk-PN2QNFK3.js";
import "./chunk-HGYWFVQ3.js";
import "./chunk-LOGNJ6KD.js";
import "./chunk-ISFFG72X.js";
import "./chunk-CAKBA2TH.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-JJB5KQLE.js";
import "./chunk-NXEB5OJ7.js";
import "./chunk-VTW5QV5N.js";
import "./chunk-RRGRB3Y4.js";
import "./chunk-FOWDQQBS.js";

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/gas/estimate-l1-fee.js
var OPStackGasPriceOracleAddress = "0x420000000000000000000000000000000000000F";
async function estimateL1Fee(options) {
  const { transaction, gasPriceOracleAddress } = options;
  const oracleContract = getContract({
    client: transaction.client,
    address: gasPriceOracleAddress || OPStackGasPriceOracleAddress,
    chain: transaction.chain
  });
  const { gasPrice, ...serializableTx } = await toSerializableTransaction({
    transaction
  });
  const serialized = serializeTransaction({
    ...serializableTx,
    type: "eip1559"
  });
  return readContract({
    contract: oracleContract,
    method: "function getL1Fee(bytes memory _data) view returns (uint256)",
    params: [serialized]
  });
}
export {
  estimateL1Fee
};
//# sourceMappingURL=estimate-l1-fee-G7XJDCQA.js.map
