import type { BuyWithCryptoStatus } from "@thirdweb-dev/sdk";
type SwapTxInfo = {
    transactionHash: string;
    status: BuyWithCryptoStatus["status"];
    subStatus?: BuyWithCryptoStatus["subStatus"];
    source: {
        symbol: string;
        value: string;
        chainId: number;
    };
    destination: {
        symbol: string;
        value: string;
        chainId: number;
    };
};
export type Store<T> = {
    getValue(): T;
    setValue(newValue: T): void;
    subscribe(listener: () => void): () => void;
};
/**
 * Create a reactive value store
 * @param initialValue - The initial value to store
 * @example
 * ```ts
 * const store = createStore(0);
 * ```
 * @returns A store object
 * @internal
 */
export declare function createStore<T>(initialValue: T): Store<T>;
export declare const swapTransactionsStore: Store<SwapTxInfo[]>;
/**
 * @internal
 */
export declare const addPendingSwapTransaction: (clientId: string, txInfo: SwapTxInfo) => void;
export {};
//# sourceMappingURL=pendingSwapTx.d.ts.map